Current Implementation: v.a.0.0.01



Class Guess:
    Need to run the program until the user decides to quit      [problem G.01]

    Methods:
        G.Mthd.01 - main loop                                   [problem G.01]
            Need to loop the game until the user decides to
            quit the program

    Attributes:
        G.Attr.01 - Menu (immutable):
            An instance of the menu class that controls
            user input for everything outside of the
            actual game

        G.Attr.02 - Game (mutable):
            An instance of the game class that controls
            user input for everything within the
            actual game

        G.Attr.03 - Default Settings (immutable):
            a dictionary that contains the default values
            for the settings

    Problem G.01:
        Need to loop the game until the user decides to
        quit the program

        Specifications:
        way to determine when the user wants to quit             [problem M.01]
        way to run the main part of the program                  ...
        way to quit the program                                  ...

        Basic Design:
        use a polling loop to run the program until
        the user decides to quit

        Algorithm:
        initialize the poll by asking the user if they want
                to quit
        while they don't want to quit
            run the program
            ask the user if they want to quit
        quit the program





class Menu:
    Need to determine when the user wants to quit                [problem M.01]
    Need to create a new game                                    [problem M.02]
    way to determine if there's an incomplete game
    way to toggle whether or not the "continue game"
        option should be displayed

    Attributes
        M.attr.01 - Options (immutable):
            A dictionary where the keys are input-option
            strings and the values are option methods

        M.attr.02 - Option Names (immutable):
            A list of strings as option names to display

        M.Attr.03 - Settings (mutable):
            A dictionary where each key is a string as the
            name of the setting and each item is an
            instance of the type needed for that setting

        M.Attr.03.a - Guess Types (mutable):
            A string of letters where each letter is each
            sequential letter of the alphabet for as long
            as the specified amount of guess types

        M.Attr.03.b - Combination Length (mutable):
            An integer that represents the length of any
            combination within a game instance

        M.Attr.03.c - Guesses (mutable):
            An integer that represents the amount of
            guesses the user is allowed before they lose
            the game

    Methods:
        M.Mthd.01 - get option:                                  [problem M.01]
            Displays the menu to the terminal then waits
            for the user to input a valid option then
            returns that option as a string

        M.Mthd.02 - start game:

    Problem M.01:
        The user needs to be able to specify when they want
        to play a game, when they want to continue their
        game, when they want to change the settings of a
        game, and when they want to quit the program.

        i.e. Need to get a valid option from the user

        Specifications:
        a way to display the options to the user                 [__str__]
        way to ask the user to choose one of the options         [raw_input]
        way to portray and a function to call for the            [Attr M.01]
                following options:
            starting a new game                                  [aesthetics]
            changing the settings of the game                    ...
            quitting the program                                 ...
            continuing the game                                  ...
        a string representation of the menu                      ...
        string for asking the user for input                     ...
        string to let the user know their input is invalid       ...
        way to clear the screen                                  [subprocess]

        Basic Design:
        display the menu and use a polling loop to wait for
        the user to input a valid option using the
        keys from the menu options attribute

        Algorithm:
        print the menu string to the terminal
        ask the user to choose an option
        while the option isn't in the menu options' keys
            clear the screen
            print the menu string to the terminal
            let the user know their option isn't valid
            ask the user to choose an option
        return the chosen option

    Problem M.02
        Need to start a new game

        Specifications:
        Game class                                              [Problem P.01]
        game settings                                           [Attr M.03]
        game                                                    [Attr G.02]
        way to clear the screen                                 [subprocess]

        Basic Design
        create a new game instance and call its main loop
        to play the game

        Algorithm
        set the game attribute to a new instance of the
                game class
        clear the screen
        call the game instance's main loop with a
                settings dictionary
        set the game property to None





class Game:
    Need to play the game                                       [Problem P.01]

    Attributes:
        P.Attr.01 - Answer (immutable):
            a string of random letters as long as the value
            of the settings' combination length where each
            letter is within the settings' guess-types

    Methods:
        P.Mthd.01 - Build Answer                                [Problem P.02]
            creates a randomized string of letters based
            off the settings

        P.Mthd.02 - Ask for Guess                               [Problem P.03]
            ask the user for their guess and wait for
            their input. if the input is invalid ask again
            until it's valid

    Problem P.01
        Need to start a new game based off the settings and
        play it until the user wins or loses

        SPECIFICATIONS
        settings                                                [Attr M.03]
        way to randomly create an answer combo                  [Problem P.02]
        way to get a valid guess from the user                  [Problem P.03]
        way to compare the guess with the answer                [Problem P.06]

    Problem P.02:
        Need to generate a random combination of a
        specified amount of numbers from a specified
        linear amount of numbers

        Specifications:
        a linear sequence to draw from                          [Attr M.03.a]
        amount for the length of a random sequence              [Attr M.03.b]
        way to randomly choose from a list                      [random]

        Basic Design:
        use a for loop invariant to iterate through the
        linear sequence and append a random choice from it
        to a new list as the random sequence

        Algorithm:
        initialize the random sequence for the loop
        for the length specified for the random sequence
            append a random choice from the linear sequence
                    to the random sequence

    Problem P.03:
        Need to get a guess from the user and check to make
        sure it's compatible

        Specifications:
        way to represent the game                               [Problem P.05]
        an input function to get a guess from the user          [raw_input]
        a function to check the input to make sure it's         [Problem P.04]
            compatible
        way to clear the screen                                 [subprocess]

        Basic Design:
        use a polling loop to ask for the user's guess until
        it's valid

        Algorithm:
        display the game
        initialize the guess by asking the user for it
        while the guess is invalid:
            clear the screen
            print the game
            let the user know their guess was invalid and
                    how to fix it
            ask for the user's guess
        return the user's guess

    Problem P.04:
        Need to make sure the user's guess is valid

        Specifications:
        user's guess                                            [raw_input]
        a linear sequence to draw from                          [Attr M.03.a]
        amount for the length of a random sequence              [Attr M.03.b]

        Basic Design:
        within a try clause, make sure the user's guess is
        exactly the combo-length and use a for loop to make
        sure each character is in the guessing-letters

        Algorithm:
        try to run the following procedure
            for each character in the user's guess
                assert the character's are in the
                        guessing-letters list from the
                        settings dictionary
            assert the length of the user's guess is the
                    same as the combo-length from the
                    settings dictionary
        if anything goes wrong
            return False
        return True

    Problem P.05:
        Need to represent the game

        Specifications:
        settings                                                [Attr M.03]
        handlers for what to do with the data
        mapping type to map user-data to handling methods

        Basic Design:
        Every line should be about the same length so if
        one of the lines is short, extra spaces should be
        formatted in. There are three dependencies so maybe
        the problem should be broken down into 3 separate
        problems

        Representation should be updated every time input
        is received from the user

    Problem P.06:
        Need to compare the user's guess to the answer

        Specifications:
        user's guess
        answer                                                  [Attr P.01]

        Basic Design:





class Game Representation:
    Stores all the information about what should be
    displayed to the screen. Class should be mutable
    (attributes should change) as the guesses displayed
    change

    Need to be able to update what's displayed every time       [Problem R.01]
    the user enters data

    Attributes:
        R.Attr.01 - Header (immutable):
            A string of the guess types to pick from that
            displays at the top of the screen

        R.Attr.02 - Base-Strings (immutable):
            A list of formattable strings as each following
            line under the header

        R.Attr.03 - Guesses (mutable):
            A multidimensional list where each inner item
            is a string to format into the Base-Strings

        R.Attr.04 - Options (static; immutable):
            a string that represents the options the user
            can enter

    Methods:
        R.Mthd.01 - Normalize Strings:
            Uses a list of uneven base-strings and evens
            them out to be stored in the header and
            base-strings attributes

        R.Mthd.02 - Find Longest String:
            Finds the longest string from a list of strings.

    Problem R.01:
        Need to be able to update what's displayed every
        time the user enters data

        Specifications:
        data from the user                                      [Problem P.05]
        handler for the data

    Problem R.02:
        need to compare two strings based on their lengths
        and modify them based off the comparison

        Specifications:
        longest from a list of strings                          [Problem R.03]
        method to handle the strings                            [Problem R.04]
        list of strings                                         [Problem R.05]
        way to find the length of a string                      [len]

        Basic Design:
        Use sequential processing to modify the strings in
        the list based off their length relative to the
        longest string

        Algorithm:
        initialize a list for modified strings
        for each string in the list of un-modified strings
            if the string is shorter than the longest:
                modify it so it's as long
                append it to the modified-strings list
        return the modified-strings list

    Problem R.03:
        need to find the longest string from a list of
        strings and return it

        Specifications:
        way to find the length of a string                      [len]
        searching algorithm                                     [brute force]

        Basic Design:
        Use sequential processing to find the longest
        string from the list

        Algorithm:
        initialize the longest string to an empty string
        for each string in the list
            if the string is longer than the longest
                set the longest string to that string

    Problem R.04:
        Need to compare the length of a string to a
        specified length and put buffers on either side
        based off the comparison

        Specifications:
        string to modify                                        [Problem R.02]
        integer as a length                                     ...

        Basic Design:
        Determine the amount of spaces needed to buffer
        each side of the string. Use control statements to
        determine how to buffer each side of the string

        Algorithm:
        The specified length should be greater than the
                string's current length
        Initialize the buffer space as the result of
                subtracting the length of the string from
                the specified length and dividing that
                number by 2 and use that number to make
                spaces
        put the buffer space between the last character and
                the rest of the string
        if the difference between the length of the string
                and the specified length isn't divisible by 2
            add one more space to the buffer space
        if the string has a "[" or a ">" character at the
                beginning
            put the number buffer space between the first
                    character and the rest of the string
        otherwise add 1 more space than the buffer space to
                the beginning of the string
        return the resulting string

    Problem R.05
        Need to make a list of strings based off the
        settings passed to the game

        Specifications:
        settings dictionary                                     [Attr M.03]
        function that adds a space between every character      [string.replace]

        Basic Design:
        Use the settings dictionary combined with some for
        loops to add the base-strings for the game
        representation to a list

        Algorithm:
        initialize a list of base-strings
        create a copy of the guess-types string from the
                settings dictionary with spaces between
                every character
        append the string to the base-strings list
        for the amount specified by the guesses integer
                from the settings dictionary
            create a string by multiplying "{} " by the
                    amount specified by the combination
                    length integer from the settings
                    dictionary
            cut off the end
            append the string to the base-strings list
        return the base-strings list
